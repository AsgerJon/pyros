# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from msgs/AuxCommand.msg. Do not edit."""
#  MIT Licence
#  Copyright (c) 2024 Asger Jon Vistisen

import codecs
import sys

python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy


class AuxCommand(genpy.Message):
  _md5sum = "8b9580415841dc015151facb94e525dc"
  _type = "msgs/AuxCommand"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool activate
time when
duration for_duration
"""
  __slots__ = ['activate', 'when', 'for_duration']
  _slot_types = ['bool', 'time', 'duration']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       activate,when,for_duration

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AuxCommand, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those
      # that are
      if self.activate is None:
        self.activate = False
      if self.when is None:
        self.when = genpy.Time()
      if self.for_duration is None:
        self.for_duration = genpy.Duration()
    else:
      self.activate = False
      self.when = genpy.Time()
      self.for_duration = genpy.Duration()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B2I2i().pack(_x.activate,
                                          _x.when.secs,
                                          _x.when.nsecs,
                                          _x.for_duration.secs,
                                          _x.for_duration.nsecs))
    except struct.error as se:
      self._check_types(struct.error("%s: '%s' when writing '%s'" % (
      type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te:
      self._check_types(ValueError("%s: '%s' when writing '%s'" % (
      type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.when is None:
        self.when = genpy.Time()
      if self.for_duration is None:
        self.for_duration = genpy.Duration()
      end = 0
      _x = self
      start = end
      end += 17
      (_x.activate, _x.when.secs, _x.when.nsecs, _x.for_duration.secs,
       _x.for_duration.nsecs,) = _get_struct_B2I2i().unpack(str[start:end])
      self.activate = bool(self.activate)
      self.when.canon()
      self.for_duration.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B2I2i().pack(_x.activate,
                                          _x.when.secs,
                                          _x.when.nsecs,
                                          _x.for_duration.secs,
                                          _x.for_duration.nsecs))
    except struct.error as se:
      self._check_types(struct.error("%s: '%s' when writing '%s'" % (
      type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te:
      self._check_types(ValueError("%s: '%s' when writing '%s'" % (
      type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using
    numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.when is None:
        self.when = genpy.Time()
      if self.for_duration is None:
        self.for_duration = genpy.Duration()
      end = 0
      _x = self
      start = end
      end += 17
      (_x.activate, _x.when.secs, _x.when.nsecs, _x.for_duration.secs,
       _x.for_duration.nsecs,) = _get_struct_B2I2i().unpack(str[start:end])
      self.activate = bool(self.activate)
      self.when.canon()
      self.for_duration.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


_struct_I = genpy.struct_I


def _get_struct_I():
  global _struct_I
  return _struct_I


_struct_B2I2i = None


def _get_struct_B2I2i():
  global _struct_B2I2i
  if _struct_B2I2i is None:
    _struct_B2I2i = struct.Struct("<B2I2i")
  return _struct_B2I2i
